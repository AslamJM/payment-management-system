// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String?  @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    ADMIN
    EMPLOYEE
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username         String   @unique
    password String
    image         String?
    role Role
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Region {
    id Int      @id @default(autoincrement())
    name String @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    status Boolean @default(true)
    shops Shop[]
}

model Shop {
   id Int      @id @default(autoincrement())
    name String @unique
    address String
    region_id Int 
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    status Boolean @default(true)
    region Region @relation(fields: [region_id],references: [id]) 
    payments Payment[]
}

model Company {
    id Int      @id @default(autoincrement())
    name String @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    status Boolean @default(true)
    payments Payment[]
}

model Collector {
    id Int      @id @default(autoincrement())
    name String @unique
    phone String @unique
    email String?
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    status Boolean @default(true)
    payments Payment[]
    payment_histories PaymentHistory[]
}

enum PaymentStatus {
    PAID
    DUE
    CANCELLED
}
    


model Payment {
   id Int      @id @default(autoincrement())
   invoice_number String @unique
   total Float
   paid Float
   due Float
   free Float
   discount Float
   saleable_return Float
   market_return Float 
   payment_date DateTime
   due_date DateTime
   verified Boolean @default(false)
   payment_status PaymentStatus @default(DUE)
    status Boolean @default(true)

   created_at DateTime @default(now())
    updated_at DateTime @updatedAt

   shop_id Int
   company_id Int
   collector_id Int

   shop Shop @relation(fields: [shop_id],references: [id],onDelete: Cascade)
   company Company @relation(fields: [company_id],references: [id],onDelete: Cascade)
   collector Collector @relation(fields: [collector_id],references: [id],onDelete: Cascade)
   histories PaymentHistory[]

}

model PaymentHistory{
   id Int      @id @default(autoincrement())
   amount Float
   date DateTime
   payment_id Int
   collector_id Int 

   payment Payment @relation(fields: [payment_id],references: [id],onDelete: Cascade) 
    collector Collector @relation(fields: [collector_id],references: [id],onDelete: Cascade)

    status Boolean @default(true)
   created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}
